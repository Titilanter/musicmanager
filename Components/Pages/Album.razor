@page "/album/{albumId:int}"
@using MusicManager.Data
@using MusicManager.Components.CustomComponents
@inject IDialogService DialogService
@inject IDatabaseService DatabaseService
@using SongData = MusicManager.Data.ORM


<PageTitle>@albumSelectionne.nom</PageTitle>

@* Ajouter targetRelease Date et Editing Deadline *@
<MudPaper Width="95%" Style="background-color:inherit;" Class="d-flex justify-between align-center">
    <div Class="d-flex gap-4">
        <MudDatePicker Label="Deadline" Editable="true" Placeholder="Select Deadline" Style="width:300px;" Class="align-self-center mb-4 ml-4" Variant="Variant.Outlined" @bind-Date="albumSelectionne.deadline"/>
        <MudDatePicker Label="Release Date" Editable="true" Placeholder="Select Release Date" Style="width:300px;" Class="align-self-center mb-4" Variant="Variant.Outlined" @bind-Date="albumSelectionne.releaseDate"/>
        <MudPaper Class="d-flex align-center p-3 gap-3" Style="background-color:inherit;" Elevation="0">
            <MudToggleIconButton @bind-Toggled="albumSelectionne.fini"
                            Icon="@Icons.Material.Rounded.Construction"
                            Color="@Color.Warning"
                            ToggledIcon="@Icons.Material.Rounded.Check"
                            ToggledColor="@Color.Success"
                            title="@(albumSelectionne.fini ? "Yes" : "No")" />

            <span>L'album est @(albumSelectionne.fini ? "fini" : "en cours de modifications")</span>
        </MudPaper>
    </div>
    <MudSpacer/>
    <MudIconButton Icon="@Icons.Material.Rounded.AddCircle" Variant="Variant.Outlined" @onclick="AddNewSong"/>
    
</MudPaper>

<MudPaper Class="d-flex flex-column gap-4" Height="70vh" Style="overflow-y:auto; background-color:inherit;">

    <MusicManager.Components.CustomComponents.MusicList album="albumSelectionne"/>


    <MudPaper Width="95%" Height="70px" Class="d-flex ml-4 pl-4" Outlined="true">
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Material.Rounded.AddCircle" @onclick="AddNewSong"/>
        <MudSpacer/>
    </MudPaper>

</MudPaper>
<MudPaper Height="10vh" Style="background-color:inherit;" Class="d-flex justify-center" Elevation="0">
    @if(hasPlanComRelated){
        <MudButton Style="width:250px; height:60px;" Variant="Variant.Filled" Class="align-self-center" Color="Color.Success" @onclick="GoToCommercial">Plan commercial</MudButton>
    }
    else{
        <MudPaper Class="d-flex align-center align-self-center mr-4" Style="background-color:inherit;" Elevation="0" @onclick:stopPropagation="true">
            <MudPaper Class="d-flex align-center p-3 gap-3 align-self-center" Style="background-color:inherit;" Outlined="true" Elevation="0" @onclick="AddPlanCom">
                <MudText Class="align-self-center">Ajouter un plan de communication</MudText>
                <MudIcon Icon="@Icons.Material.Rounded.AddCircle" Class="align-self-center"/>
            </MudPaper>
        </MudPaper>
    }
</MudPaper>


@code{
    [Parameter]
    public int albumId {get; set;} = 1;

    private bool AlbumFinished {get; set;}
    private bool hasPlanComRelated {get; set;}

    private List<MusicManager.Data.ORM.Song> songs = new List<MusicManager.Data.ORM.Song>();


    private MusicManager.Data.ORM.Album albumSelectionne {get; set;} = new MusicManager.Data.ORM.Album();

    private async Task AddNewSong()
    {
        Console.WriteLine("AddNewSong");
    
        var parameters = new DialogParameters();
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
    
        // Ouvrir la modal AddSongModal au lieu de AddAlbumModal
        var dialog = DialogService.Show<AddSongModal>("Ajouter une chanson", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Logique supplémentaire après ajout, comme actualiser la liste des chansons
            Console.WriteLine("Chanson ajoutée avec succès.");
            songs = await DatabaseService.GetAllSongsAsync();
        }
    }


    private void GoToCommercial(){
        Console.WriteLine("GoToCommercial");
    }

    private void AddPlanCom(){
        Console.WriteLine("AddPlanCom");
    }

    protected override async Task OnInitializedAsync(){
        if (albumId > 0) {
            albumSelectionne = await DatabaseService.GetAlbumByIdAsync(albumId);
            hasPlanComRelated = await DatabaseService.CheckPlanComByAlbumId(albumId);
            if (albumSelectionne == null) {
                Console.WriteLine($"Album avec l'ID {albumId} introuvable.");
            }
        } else {
            Console.WriteLine("ID de l'album invalide.");
        }
    }
}